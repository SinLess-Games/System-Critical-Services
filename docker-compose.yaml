name: System-Critical-Services

services:
  traefik:
    image: traefik:v3.2.1
    container_name: traefik
    restart: always
    cap_add:
      - NET_ADMIN
    networks:
      - frontend
      - backend
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
      - "8081:8080" # Traefik Dashboard
    volumes:
      - ./configs/traefik/config.yaml:/etc/traefik/traefik.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/traefik/certs/cloudflare-acme.json:/data/cloudflare-acme.json:rw
      - traefik_data:/data
    environment:
      CF_API_EMAIL: "${CF_API_EMAIL}"
      CF_DNS_API_TOKEN: "${CF_DNS_API_TOKEN}"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        reservations:
          cpus: "0.25"
          memory: 256M
        limits:
          cpus: "0.50"
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    command:
      - "--providers.swarm=true"
      - "--providers.swarm.exposedByDefault=false"
      - "--providers.swarm.endpoint=unix:///var/run/docker.sock"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesResolvers.cloudflare.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesResolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesResolvers.cloudflare.acme.email=disdainful777@gmail.com"
      - "--certificatesResolvers.cloudflare.acme.storage=/data/cloudflare-acme.json"
      - "--certificatesResolvers.cloudflare.acme.caServer=https://acme-v02.api.letsencrypt.org/directory"
      - "--log.level=INFO"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--accesslog=true"
      - "--accesslog.filepath=/data/access.log"
      - "--accesslog.bufferingsize=100"
    labels:
      - "traefik.enable=true"
      # Traefik Dashboard
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.sinlessgamesllc.com`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=authentik-auth"

  portainer:
    image: portainer/portainer-ce:2.24.1
    container_name: portainer
    restart: always
    labels:
      - "traefik.enable=true"
      # Routers
      - "traefik.http.routers.portainer.rule=Host(`portainer.sinlessgamesllc.com`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=cloudflare"
      # Services
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      # Middlewares
      - "traefik.http.routers.portainer.middlewares=authentik-auth"
    networks:
      - frontend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        reservations:
          cpus: '0.25'
          memory: 256M
        limits:
          cpus: '0.50'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  
  portainer-agent:
    image: portainer/agent:2.24.1
    container_name: portainer-agent
    restart: always
    labels:
      - "traefik.enable=false"
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/volumes:/var/lib/docker/volumes:ro
    environment:
      AGENT_CLUSTER_ADDR: tasks.portainer
      AGENT_PORT: 9001
      LOG_LEVEL: INFO
    deploy:
      mode: global
      placement:
        constraints:
          - node.role != manager

  authentik-server:
    image: ghcr.io/goauthentik/server:2024.10.4
    container_name: authentik-server
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: "${POSTGRES_USER:-authentik}"
      AUTHENTIK_POSTGRESQL__NAME: "${POSTGRES_DB:-authentik}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${POSTGRES_PASSWORD:?error}"
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY:?error}"
      # Optional: Enable Error Reporting
      # AUTHENTIK_ERROR_REPORTING__ENABLED: "${AUTHENTIK_ERROR_REPORTING:-false}"
      # Optional: Enable Email Sending
      # AUTHENTIK_EMAIL__HOST: "${EMAIL_HOST:?error}"
      # AUTHENTIK_EMAIL__PORT: "${EMAIL_PORT:-25}"
      # AUTHENTIK_EMAIL__USERNAME: "${EMAIL_USERNAME:?error}"
      # AUTHENTIK_EMAIL__PASSWORD: "${EMAIL_PASSWORD:?error}"
      # AUTHENTIK_EMAIL__USE_TLS: "${EMAIL_USE_TLS:-false}"
      # AUTHENTIK_EMAIL__USE_SSL: "${EMAIL_USE_SSL:-false}"
      # AUTHENTIK_EMAIL__TIMEOUT: "${EMAIL_TIMEOUT:-10}"
      # AUTHENTIK_EMAIL__FROM: "${EMAIL_FROM:?error}"
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=true"
      # Routers
      - "traefik.http.routers.authentik-ui.rule=Host(`authentik.sinlessgamesllc.com`)"
      - "traefik.http.routers.authentik-ui.entrypoints=websecure"
      - "traefik.http.routers.authentik-ui.tls=true"
      - "traefik.http.routers.authentik-ui.tls.certresolver=cloudflare"
      # Services
      - "traefik.http.services.authentik-ui.loadbalancer.server.port=9443"
      # Middlewares
      - "traefik.http.routers.authentik-ui.middlewares=authentik-auth"

  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.10.4
    container_name: authentik-worker
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: "${POSTGRES_USER:-authentik}"
      AUTHENTIK_POSTGRESQL__NAME: "${POSTGRES_DB:-authentik}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${POSTGRES_PASSWORD:?error}"
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY:?error}"
      # Optional: Enable Error Reporting
      # AUTHENTIK_ERROR_REPORTING__ENABLED: "${AUTHENTIK_ERROR_REPORTING:-false}"
      # Optional: Enable Email Sending
      # AUTHENTIK_EMAIL__HOST: "${EMAIL_HOST:?error}"
      # AUTHENTIK_EMAIL__PORT: "${EMAIL_PORT:-25}"
      # AUTHENTIK_EMAIL__USERNAME: "${EMAIL_USERNAME:?error}"
      # AUTHENTIK_EMAIL__PASSWORD: "${EMAIL_PASSWORD:?error}"
      # AUTHENTIK_EMAIL__USE_TLS: "${EMAIL_USE_TLS:-false}"
      # AUTHENTIK_EMAIL__USE_SSL: "${EMAIL_USE_SSL:-false}"
      # AUTHENTIK_EMAIL__TIMEOUT: "${EMAIL_TIMEOUT:-10}"
      # AUTHENTIK_EMAIL__FROM: "${EMAIL_FROM:?error}"
    volumes:
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - frontend
      - backend

  postgres:
    image: postgres:16.6
    container_name: authentik-db
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-authentik}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:?error}"
      POSTGRES_DB: "${POSTGRES_DB:-authentik}"
      TZ: "${TZ:-UTC}"
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U "${POSTGRES_USER:-authentik}"']
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend

  redis:
    image: redis:7.4.1
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backend

  cloudflared:
    image: cloudflare/cloudflared:2024.11.1
    container_name: cloudflared
    restart: always
    networks:
      - backend
    environment:
      CLOUDFLARE_TUNNEL_TOKEN: "${CLOUDFLARE_TUNNEL_TOKEN}"
    command: >
      tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=false"
      resources:
        reservations:
          cpus: '0.10'
          memory: 128M
        limits:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

volumes:
  traefik_data:
    driver: local
    driver_opts:
      o: bind
      device: "/var/traefik/data"
  
  portainer_data:
    driver: local
    driver_opts:
      o: bind
      device: "/var/portainer/data"

  postgres_data:
    driver: local

  redis_data:
    driver: local

networks:
  backend:
    driver: overlay
    attachable: true
  
  frontend:
    driver: overlay
    attachable: true
