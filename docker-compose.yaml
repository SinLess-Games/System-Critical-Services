# Define Docker networks to segment and manage communication between services.
networks:
  backend:
    name: backend
    driver: overlay                               # Overlay network spans multiple Docker nodes in a swarm
    attachable: true                              # Allows standalone containers to connect to this network
    driver_opts:
      encrypted: "true"                           # Encrypts network traffic for added security
    ipam:
      driver: default
      config:
        - subnet: 10.0.1.0/24                     # Subnet for backend services

  frontend:                                       # Frontend network for user-facing services
    name: frontend
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "false"                          # No encryption required for public access
    ipam:
      driver: default
      config:
        - subnet: 10.0.2.0/24                     # Subnet for frontend services
# Run the command below to create a service for the portainer Agent
# docker service create   --name portainer_agent   --network portainer-agent-network   --mode global   -e AGENT_CLUSTER_ADDR=tasks.portainer-agent   portainer/agent

# include:
#   - ./cloudflared/docker-compose.yaml
#   - ./homepage/docker-compose.yaml

services:
  watchtower:
    image: containrrr/watchtower:latest           # Use the latest Watchtower image
    restart: always                               # Ensure container restarts if it stops
    environment:
      WATCHTOWER_API_TOKEN: ${WATCHTOWER_API_TOKEN}
    security_opt:
      - no-new-privileges=true                    # Restrict privilege escalation
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Access Docker socket for updates
    networks:
      - frontend
      - backend
    command: >
      --interval 300                              # Check for updates every 5 minutes
      --cleanup                                   # Clean up unused images
      --http-api-metrics true                     # Enable HTTP API metrics
      --http-api-token ${WATCHTOWER_API_TOKEN}    # Secure API with token

  
