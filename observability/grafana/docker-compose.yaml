networks:
  backend:
    external: true
  frontend:
    external: true

volumes:
  grafana-data:
    driver: local
  dbdata:
    driver: local

x-environment: &oncall-environment
  DATABASE_TYPE: mysql
  BROKER_TYPE: redis
  BASE_URL: http://grafana-oncall-engine:8081 #URL to the oncall engine
  SECRET_KEY: $GRAFANA_SECRET_KEY
  FEATURE_PROMETHEUS_EXPORTER_ENABLED: ${FEATURE_PROMETHEUS_EXPORTER_ENABLED:-true}
  PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-}
  RABBITMQ_USERNAME: "rabbitmq"
  RABBITMQ_PASSWORD: $RABBITMQ_PASSWORD
  RABBITMQ_HOST: "rabbitmq"
  RABBITMQ_PORT: "5672"
  RABBITMQ_DEFAULT_VHOST: "/"
  MYSQL_PASSWORD: $MYSQL_ROOT_PASSWORD
  MYSQL_DB_NAME: oncall_hobby
  MYSQL_USER: ${MYSQL_USER:-root}
  MYSQL_HOST: ${MYSQL_HOST:-grafana-db}
  MYSQL_PORT: 3306
  REDIS_URI: redis://redis:6379/0
  DJANGO_SETTINGS_MODULE: settings.hobby
  CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
  CELERY_WORKER_CONCURRENCY: "1"
  CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
  CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
  CELERY_WORKER_BEAT_ENABLED: "True"
  GRAFANA_API_URL: http://grafana:3000

configs:
  grafana.ini:
    content: |
      [feature_toggles]
      accessControlOnCall = false

services:

  grafana-oncall-engine:
    image: grafana/oncall:v1.15.0
    container_name: grafana-oncall-engine
    restart: always
    ports:
      - 8081:8080
    command: sh -c "uwsgi --ini uwsgi.ini"
    environment: *oncall-environment
    networks:
      - backend
    volumes:
      - ./.data/oncall:/var/lib/oncall
    depends_on:
      mysql:
        condition: service_healthy
      oncall_db_migration:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery:
    image: grafana/oncall:v1.15.0
    restart: always
    command: sh -c "./celery_with_exporter.sh"
    environment: *oncall-environment
    volumes:
      - ./.data/oncall:/var/lib/oncall
    networks:
      - backend
    depends_on:
      mysql:
        condition: service_healthy
      oncall_db_migration:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  oncall_db_migration:
    image: grafana/oncall:v1.15.0
    container_name: oncall_db_migration
    command: python manage.py migrate --noinput
    environment: *oncall-environment
    networks:
      - backend
    volumes:
      - ./.data/oncall:/var/lib/oncall
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:7.0.15
    container_name: redis
    restart: always
    networks:
      - backend
    expose:
      - 6379
    volumes:
      - ./.data/redis:/data
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.5"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: 5s
      interval: 5s
      retries: 10

  rabbitmq:
    image: "rabbitmq:3.12.0-management"
    restart: always
    hostname: rabbitmq
    networks:
      - backend
    volumes:
      - ./.data/rabbitmq:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: $RABBITMQ_PASSWORD
      RABBITMQ_DEFAULT_VHOST: "/"
    deploy:
      resources:
        limits:
          memory: 1000m
          cpus: "0.5"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  mysql_to_create_grafana_db:
    image: mysql:8.0.32
    networks:
      - backend
    command: >-
      bash -c "mysql -h ${MYSQL_HOST:-mysql} -uroot -p${MYSQL_ROOT_PASSWORD:?err}
      -e 'CREATE DATABASE IF NOT EXISTS grafana CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;'"
    depends_on:
      mysql:
        condition: service_healthy
  
  mysql:
    image: mysql:8.0.32
    container_name: grafana-db
    command: >-
      --character-set-server=utf8mb4
    restart: always
    networks:
      - backend
    volumes:
      - ./.data/mysql:/var/lib/mysql
      - ./configs/mysql-init:/docker-entrypoint-initdb.d  # Mount custom init scripts
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: oncall_hobby
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p$MYSQL_ROOT_PASSWORD"]
      timeout: 40s
      retries: 10

  grafana:
    image: "grafana/grafana:11.4.0"
    container_name: grafana
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      oncall_db_migration:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
      - frontend
    environment:
      SECRET_KEY: $GRAFANA_SECRET_KEY
      GF_DATABASE_TYPE: mysql
      GF_DATABASE_HOST: ${MYSQL_HOST:-mysql}
      GF_DATABASE_USER: ${MYSQL_USER:-root}
      GF_DATABASE_PASSWORD: ${MYSQL_ROOT_PASSWORD:?err}
      GF_FEATURE_TOGGLES_ENABLE: externalServiceAccounts
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: grafana-oncall-app
      GF_INSTALL_PLUGINS: grafana-oncall-app,grafana-pyroscope-app
      GF_AUTH_MANAGED_SERVICE_ACCOUNTS_ENABLED: 'true'
      GF_LOKI_URL: http://loki:3100
      GF_TEMPO_URL: http://tempo:3200
      GF_MIMIR_URL: http://mimir:9009
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      DS_PROMETHEUS: http://prometheus:9090
    configs:
      - source: grafana.ini
        target: /etc/grafana/grafana.ini
    volumes:
      - ./plugins/oncall.yaml:/etc/grafana/provisioning/plugins/oncall.yaml
      - ./dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./configs/providers.yaml:/etc/grafana/provisioning/provisioning.yaml
      - ./configs/grafana.yaml:/etc/grafana/grafana.yaml
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.5"
  
  pyroscope:
    image: grafana/pyroscope:latest
    container_name: pyroscope
    restart: always
    networks:
      - backend
    environment:
      PYROSCOPE_SERVER: http://pyroscope:4040
      PYROSCOPE_APPLICATION_NAME: grafana
