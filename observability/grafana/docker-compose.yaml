# Docker Compose configuration for Grafana OnCall and related services.
# This file defines networks, persistent volumes, shared environment variables,
# custom configurations, and all the required services.
################################################################################
# NETWORKS
################################################################################
networks:
  # 'backend' network is used for internal communication between services.
  backend:
    external: true  # Assumes an externally created network named 'backend' exists.
  # 'frontend' network is used to expose certain services to external clients.
  frontend:
    external: true  # Assumes an externally created network named 'frontend' exists.

################################################################################
# VOLUMES
################################################################################
volumes:
  # Volume for persisting Grafana data (e.g., dashboards, plugins).
  grafana-data:
    driver: local  # Use the local volume driver.
  # Volume for persisting database data.
  dbdata:
    driver: local  # Use the local volume driver.

################################################################################
# SHARED ENVIRONMENT VARIABLES (YAML Anchor)
################################################################################
# This block is shared among several services (e.g., oncall engine, celery)
# to keep environment configurations consistent.
x-environment: &oncall-environment
  DATABASE_TYPE: mysql
  BROKER_TYPE: redis
  # Base URL to access the OnCall engine.
  BASE_URL: http://grafana-oncall-engine:8081
  # Secret key for the application (set via external environment variable).
  SECRET_KEY: $GRAFANA_SECRET_KEY
  # Enable or disable the Prometheus exporter feature; defaults to true.
  FEATURE_PROMETHEUS_EXPORTER_ENABLED: ${FEATURE_PROMETHEUS_EXPORTER_ENABLED:-true}
  # Secret for Prometheus exporter; can be overridden.
  PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-}
  # RabbitMQ credentials and connection details.
  RABBITMQ_USERNAME: "rabbitmq"
  RABBITMQ_PASSWORD: $RABBITMQ_PASSWORD
  RABBITMQ_HOST: "rabbitmq"
  RABBITMQ_PORT: "5672"
  RABBITMQ_DEFAULT_VHOST: "/"
  # MySQL connection details.
  MYSQL_PASSWORD: $MYSQL_ROOT_PASSWORD
  MYSQL_DB_NAME: oncall_hobby
  MYSQL_USER: ${MYSQL_USER:-root}
  MYSQL_HOST: ${MYSQL_HOST:-grafana-db}
  MYSQL_PORT: 3306
  # Redis connection URI.
  REDIS_URI: redis://redis:6379/0
  # Django settings module used by the OnCall engine.
  DJANGO_SETTINGS_MODULE: settings.hobby
  # Celery configuration for task processing.
  CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
  CELERY_WORKER_CONCURRENCY: "1"
  CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
  CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
  CELERY_WORKER_BEAT_ENABLED: "True"
  # URL to access the Grafana API.
  GRAFANA_API_URL: http://grafana.sinlessgamesllc.com

################################################################################
# CUSTOM CONFIGURATIONS
################################################################################
configs:
  # Custom Grafana configuration file.
  grafana.ini:
    content: |
      [feature_toggles]
      accessControlOnCall = true

################################################################################
# SERVICES
################################################################################
services:
  ########################################
  # MySQL Database Service for Grafana and OnCall
  ########################################
  mysql:
    image: mysql:8.0.32
    container_name: grafana-db
    # Set MySQL server character set to support Unicode.
    command: >-
      --character-set-server=utf8mb4
    restart: always
    networks:
      - backend  # Internal communication network.
    volumes:
      - ./.data/mysql:/var/lib/mysql  # Persist MySQL data.
      - ./configs/mysql-init:/docker-entrypoint-initdb.d  # Mount initialization scripts.
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD  # Root password from external environment.
      MYSQL_DATABASE: oncall_hobby  # Default database for the OnCall service.
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p$MYSQL_ROOT_PASSWORD"]
      timeout: 40s
      retries: 10  # Allow up to 10 retries for health check.

  ########################################
  # Grafana Service for Visualization and Dashboards
  ########################################
  grafana:
    image: "grafana/grafana:11.4.0"
    container_name: grafana
    restart: always  # Automatically restart the container if it stops.
    ports:
      - 3001:3000  # Map host port 3001 to container port 3000.
    depends_on:
      mysql:
        condition: service_healthy
      oncall_db_migration:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend  # Internal communications.
      - frontend  # Exposed to external traffic.
    environment:
      SECRET_KEY: $GRAFANA_SECRET_KEY
      GF_DATABASE_TYPE: mysql
      GF_DATABASE_HOST: ${MYSQL_HOST:-mysql}
      GF_DATABASE_USER: ${MYSQL_USER:-root}
      GF_DATABASE_PASSWORD: ${MYSQL_ROOT_PASSWORD:?err}
      GF_FEATURE_TOGGLES_ENABLE: externalServiceAccounts
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: grafana-oncall-app
      GF_INSTALL_PLUGINS: grafana-oncall-app,grafana-pyroscope-app
      GF_AUTH_MANAGED_SERVICE_ACCOUNTS_ENABLED: 'true'
      GF_LOKI_URL: http://loki:3100
      GF_TEMPO_URL: http://tempo:3200
      GF_MIMIR_URL: http://mimir:9009
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      DS_PROMETHEUS: http://prometheus:9090
      INFLUX_USER: ${INFLUX_USER:-admin}
      INFLUX_PASSWORD: ${INFLUX_PASSWORD:-admin}
    configs:
      # Apply the custom Grafana configuration file.
      - source: grafana.ini
        target: /etc/grafana/grafana.ini
    volumes:
      - ./plugins/oncall.yaml:/etc/grafana/provisioning/plugins/oncall.yaml  # Provision the OnCall plugin.
      - ./dashboards:/etc/grafana/provisioning/dashboards  # Mount dashboard definitions.
      - ./configs/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml  # Data source provisioning.
      - ./configs/providers.yaml:/etc/grafana/provisioning/provisioning.yaml  # Provisioning settings.
      - ./configs/grafana.yaml:/etc/grafana/grafana.yaml  # Additional Grafana configuration.
    deploy:
      resources:
        limits:
          memory: 500m  # Memory limit for the Grafana container.
          cpus: "0.5"   # CPU limit for the Grafana container.
  
  ########################################
  # Pyroscope Service for Application Profiling
  ########################################
  pyroscope:
    image: grafana/pyroscope:latest
    container_name: pyroscope
    restart: always  # Ensure container restarts if it stops unexpectedly.
    networks:
      - backend  # Use backend network for internal communication.
    environment:
      # URL for the Pyroscope server (internal address).
      PYROSCOPE_SERVER: http://pyroscope:4040
      # Application name as recognized by Pyroscope.
      PYROSCOPE_APPLICATION_NAME: grafana

  ########################################
  # Loki Service for Log Aggregation
  ########################################
  loki:
    image: grafana/loki:latest
    container_name: loki
    hostname: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./configs/loki.yaml:/etc/loki/local-config.yaml
      - ./.data:/loki:rw
    networks:
      - backend

  ########################################
  # Tempo Service for Distributed Tracing
  ########################################
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    hostname: tempo
    ports:
      - "3200:3200"
    command: -config.file=/etc/tempo/local-config.yaml
    volumes:
      - ./configs/tempo.yaml:/etc/tempo/local-config.yaml
    networks:
      - backend

  ########################################
  # Mimir Service for Synthetic Monitoring and longterm prometheus storage
  ########################################
  mimir:
    image: grafana/mimir:latest
    container_name: mimir
    hostname: mimir
    ports:
      - "9009:9009"
    command: -config.file=/etc/mimir/local-config.yaml
    volumes:
      - ./configs/mimir.yaml:/etc/mimir/local-config.yaml
    networks:
      - backend

  ########################################
  # OpenTelemetry Collector Service
  ########################################
  otelcol:
    image: otel/opentelemetry-collector:0.104.0
    restart: unless-stopped
    container_name: otelcol
    # restart: unless-stopped
    networks:
      - backend
    ports:
      - 4317:4317  # otlp grpc
      - 4318:4318  # otlp http
      - 8888:8888 # monitoring
      - 14268:14268 # jaeger thrift
    command: --config=/etc/otelcol/config.yaml
    volumes:
      - ./configs/otelcol.yaml:/etc/otelcol/config.yaml
  
  ########################################
  # goBlog Service
  ########################################
  goblog:
    image: mariomac/goblog:dev
    restart: unless-stopped
    networks:
      - backend
    ports:
      # Exposes port 18843, forwarding it to container port 8443
      - "18443:8443"

  ########################################
  # Beyla Service for autoinstrumentation
  ########################################
  autoinstrumenter:
    image: grafana/beyla:latest
    pid: "service:goblog"
    restart: unless-stopped
    privileged: true
    ports:
      - 18444:8444
    networks:
      - backend
    environment:
      BEYLA_TRACE_PRINTER: text
      BEYLA_OPEN_PORT: 8443