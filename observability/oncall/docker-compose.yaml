networks:
  backend:
    external: true

x-environment: &oncall-environment
  BASE_URL: ${DOMAIN}
  SECRET_KEY: ${SECRET_KEY}
  
  # RabbitMQ Settings
  RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-rabbitmq}
  RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
  RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
  RABBITMQ_PORT: "5672"
  RABBITMQ_DEFAULT_VHOST: "/"

  # MySQL Settings
  MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  MYSQL_DB_NAME: ${MYSQL_DB_NAME:-oncall_hobby}
  MYSQL_USER: ${MYSQL_USER:-root}
  MYSQL_HOST: ${MYSQL_HOST:-mysql}
  MYSQL_PORT: ${MYSQL_PORT:-3306}

  # Redis Settings
  REDIS_URI: ${REDIS_URI:-redis://redis:6379/0}

  # Django & Celery Settings
  DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-settings.hobby}
  CELERY_WORKER_QUEUE: ${CELERY_WORKER_QUEUE:-"default,critical,long,slack,telegram,webhook,retry,celery"}
  CELERY_WORKER_CONCURRENCY: ${CELERY_WORKER_CONCURRENCY:-1}
  CELERY_WORKER_MAX_TASKS_PER_CHILD: ${CELERY_WORKER_MAX_TASKS_PER_CHILD:-100}
  CELERY_WORKER_SHUTDOWN_INTERVAL: ${CELERY_WORKER_SHUTDOWN_INTERVAL:-65m}
  CELERY_WORKER_BEAT_ENABLED: ${CELERY_WORKER_BEAT_ENABLED:-True}

  # Grafana API Settings
  GRAFANA_API_URL: ${GRAFANA_API_URL:-http://grafana:3000}
  GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}

  # Prometheus Exporter (Optional)
  FEATURE_PROMETHEUS_EXPORTER_ENABLED: ${FEATURE_PROMETHEUS_EXPORTER_ENABLED:-true}
  PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET}

services:
  engine:
    image: grafana/oncall
    restart: always
    logging:
      driver: loki
      options:
        loki-url: "http://192.168.1.3:3100/loki/api/v1/push"
        loki-external-labels: "container_name=oncall-engine" # Change this to your the name of your container
        loki-retries: 2
        loki-max-backoff: 800ms
        loki-timeout: 1s
        keep-file: "true"
        mode: "non-blocking"
    ports:
      - "8084:8080"
    command: sh -c "uwsgi --ini uwsgi.ini"
    environment: *oncall-environment
    depends_on:
      mysql:
        condition: service_healthy
      oncall_db_migration:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./configs/uwsgi.ini:/etc/app/uwsgi.ini
    networks:
      - backend

  celery:
    image: grafana/oncall
    restart: always
    command: sh -c "./celery_with_exporter.sh"
    environment: *oncall-environment
    logging:
      driver: loki
      options:
        loki-url: "http://192.168.1.3:3100/loki/api/v1/push"
        loki-external-labels: "container_name=gitlab" # Change this to your the name of your container
        loki-retries: 2
        loki-max-backoff: 800ms
        loki-timeout: 1s
        keep-file: "true"
        mode: "non-blocking"
    depends_on:
      mysql:
        condition: service_healthy
      oncall_db_migration:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend

  oncall_db_migration:
    image: grafana/oncall
    command: python manage.py migrate --noinput
    environment: *oncall-environment
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend

  mysql:
    # When spinning this up for the first time it may error out due to the healthcheck
    # Just wait a few minutes and it should be up and running then run `docker-compose up -d` again
    image: mysql:8.0.32
    command: >-
      --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: always
    expose:
      - 3306
    volumes:
      - ./.data/mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DB_NAME}
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

  rabbitmq:
    image: rabbitmq:3.8-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    expose:
      - 5672
    ports:
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:6.2
    restart: always
    expose:
      - 6379
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3