services:
  authentik-server:
    image: ghcr.io/goauthentik/server:2024.10.5
    container_name: authentik-server
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: "${POSTGRES_USER:-authentik}"
      AUTHENTIK_POSTGRESQL__NAME: "${POSTGRES_DB:-authentik}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${POSTGRES_PASSWORD:?error}"
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY:?error}"
      TZ: "${TZ:-UTC}"
      AUTHENTIK_COOKIE_DOMAIN: '${AUTHENTIK_COOKIE_DOMAIN}'
      AUTHENTIK_ERROR_REPORTING__ENABLED: '${AUTHENTIK_ERROR_REPORTING__ENABLED}'
      AUTHENTIK_LOG_LEVEL: '${AUTHENTIK_LOG_LEVEL}'
      AUTHENTIK_GDPR_COMPLIANCE: 'true'
      DOMAIN: '${DOMAIN}'
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      authentik-worker:
        condition: service_started
    restart: unless-stopped
    networks:
      - frontend
      - backend
    labels:
      - traefik.enable=true
      # HTTP
      - "traefik.http.routers.authentik-server-rtr.rule=Host(`authentik.${DOMAIN}`)"
      - "traefik.http.routers.authentik-server-rtr.entrypoints=http"
      - "traefik.http.routers.authentik-server-rtr.middlewares=redirect-to-https"
      # HTTPS
      - "traefik.http.routers.authentik-server-rtr-https.rule=Host(`authentik.${DOMAIN}`)"
      - "traefik.http.routers.authentik-server-rtr-https.entrypoints=https"
      - "traefik.http.routers.authentik-server-rtr-https.tls=true"
      - "traefik.http.services.authentik-server.loadbalancer.server.port=9000"
      # Watchtower labels
      - "com.centurylinklabs.watchtower.enable=true"

  authentik-proxy:
    image: ghcr.io/goauthentik/proxy
    container_name: sinlessgamesllc-authentik-proxy
    networks:
      - frontend
      - backend
    environment:
      AUTHENTIK_HOST: https://authentik.${DOMAIN}
      AUTHENTIK_INSECURE: "false"
      AUTHENTIK_TOKEN: ${AUTHENTIK_SINLESS_OPUTPOST_TOKEN}
      DOMAIN: ${DOMAIN}
    labels:
      # Watchtower labels
      - "com.centurylinklabs.watchtower.enable=true"

  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.10.5
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: "${POSTGRES_USER:-authentik}"
      AUTHENTIK_POSTGRESQL__NAME: "${POSTGRES_DB:-authentik}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${POSTGRES_PASSWORD:?error}"
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY:?error}"
      TZ: "${TZ:-UTC}"
      AUTHENTIK_COOKIE_DOMAIN: '${AUTHENTIK_COOKIE_DOMAIN}'
      AUTHENTIK_ERROR_REPORTING__ENABLED: '${AUTHENTIK_ERROR_REPORTING__ENABLED}'
      AUTHENTIK_EMAIL__HOST: '${AUTHENTIK_EMAIL__HOST}'
      AUTHENTIK_EMAIL__PORT: '${AUTHENTIK_EMAIL__PORT}'
      AUTHENTIK_EMAIL__USERNAME: 'file:///run/secrets/smtp_user'
      AUTHENTIK_EMAIL__PASSWORD: 'file:///run/secrets/smtp_password'
      AUTHENTIK_EMAIL__USE_TLS: '${AUTHENTIK_EMAIL__USE_TLS}'
      AUTHENTIK_EMAIL__USE_SSL: '${AUTHENTIK_EMAIL__USE_SSL}'
      AUTHENTIK_EMAIL__TIMEOUT: '${AUTHENTIK_EMAIL__TIMEOUT}'
      AUTHENTIK_EMAIL__FROM: '${AUTHENTIK_EMAIL__FROM}'
      AUTHENTIK_LOG_LEVEL: '${AUTHENTIK_LOG_LEVEL}'
      AUTHENTIK_GDPR_COMPLIANCE: 'true'
    volumes:
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - frontend
      - backend
    deploy:
      replicas: 1
    labels:
      # Watchtower labels
      - "com.centurylinklabs.watchtower.enable=true"

  postgres:
    image: postgres:16.6
    container_name: authentik-db
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-authentik}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:?error}"
      POSTGRES_DB: "${POSTGRES_DB:-authentik}"
      TZ: "${TZ:-UTC}"
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U "${POSTGRES_USER:-authentik}"']
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Watchtower labels
      - "com.centurylinklabs.watchtower.enable=true"

  redis:
    image: redis:7.4.1
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    environment:
      TZ: "${TZ:-UTC}"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Watchtower labels
      - "com.centurylinklabs.watchtower.enable=true"